{"ast":null,"code":"const bcrypt = require('bcryptjs');\n\nconst saltRounds = 10;\nexport function encrypt(plainTextPassword) {\n  plainTextPassword = window.prompt('enter password: ');\n  return new Promise((resolve, reject) => {\n    bcrypt.hash(plainTextPassword, saltRounds, (err, res) => {\n      if (err) reject(err);else {\n        resolve(res);\n      }\n    });\n  });\n}\nexport function decrypt(plainTextPassword, hashedPassword) {\n  return new Promise((resolve, reject) => {\n    bcrypt.compare(plainTextPassword, hashedPassword, (err, res) => {\n      if (err) reject(err);else {\n        resolve(res);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/likemdunyo/Desktop/Gameli/client/src/utils/encrypt.js"],"names":["bcrypt","require","saltRounds","encrypt","plainTextPassword","window","prompt","Promise","resolve","reject","hash","err","res","decrypt","hashedPassword","compare"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEA,OAAO,SAASC,OAAT,CAAiBC,iBAAjB,EAAmC;AACxCA,EAAAA,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,kBAAd,CAApB;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAWC,MAAX,KAAoB;AACrCT,IAAAA,MAAM,CAACU,IAAP,CAAYN,iBAAZ,EAAgCF,UAAhC,EAA8C,CAACS,GAAD,EAAOC,GAAP,KAAa;AACzD,UAAID,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN,CAAT,KACK;AACHH,QAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF,KALD;AAOD,GARM,CAAP;AASD;AAED,OAAO,SAASC,OAAT,CAAiBT,iBAAjB,EAAqCU,cAArC,EAAoD;AACzD,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAWC,MAAX,KAAsB;AACvCT,IAAAA,MAAM,CAACe,OAAP,CAAeX,iBAAf,EAAmCU,cAAnC,EAAoD,CAACH,GAAD,EAAOC,GAAP,KAAa;AAC/D,UAAID,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN,CAAT,KACI;AACFH,QAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF,KALD;AAMD,GAPM,CAAP;AAQD","sourcesContent":["const bcrypt = require('bcryptjs')\nconst saltRounds = 10\n\nexport function encrypt(plainTextPassword){\n  plainTextPassword = window.prompt('enter password: ')\n  return new Promise((resolve , reject)=>{\n    bcrypt.hash(plainTextPassword , saltRounds  , (err , res)=>{\n      if (err) reject(err)\n      else {\n        resolve(res)\n      }\n    });\n\n  })\n}\n\nexport function decrypt(plainTextPassword , hashedPassword){\n  return new Promise((resolve , reject) => {\n    bcrypt.compare(plainTextPassword , hashedPassword , (err , res)=>{\n      if (err) reject(err)\n      else{\n        resolve(res)\n      }\n    })\n  })\n}"]},"metadata":{},"sourceType":"module"}